//This is the code for Exercise 1
//author: Neelay Junnarkar



/*My Methods using an object version of merge*/

public Deck merge(Deck d2) {
	Deck result = new Deck(cards.length + d2.cards.length);
	int choice;
	int i = 0, j = 0;
	
	for (int k = 0; k < result.cards.length; k++) {
		choice = 1;
		
		if (i == cards.length) {
			choice = 2;
		} else if (j == d2.cards.length) {
			choice = 1;
		} else if (Card.compareCards(cards[i], d2.cards[j]) > 0) {
			choice = 2;
		}
		
		if (choice == 1) {
			result.cards[k] = cards[i];  
			i++;
	    } else {
			result.cards[k] = d2.cards[j];  
			j++;
	    }	
	}
	return result;
}

public Deck mergeSort() {
	if (cards.length < 2) {
	    return this;
	}
	
	int mid = (cards.length-1) / 2;

	Deck d1 = subdeck(this, 0, mid);
	Deck d2 = subdeck(this, mid+1, cards.length-1);
	
	// sort the halves
	d1 = mergeSort(d1);
	d2 = mergeSort(d2);

	return d1.merge(d2);
}





/*ORIGINAL METHODS*/
/*
 * Merges two sorted decks into a new sorted deck.
 */
public static Deck merge(Deck d1, Deck d2) {
// create the new deck
	Deck result = new Deck (d1.cards.length + d2.cards.length);
		
	int choice;    // records the winner (1 means d1, 2 means d2)
	int i = 0;     // traverses the first input deck
	int j = 0;     // traverses the second input deck
		
	// k traverses the new (merged) deck
	for (int k = 0; k < result.cards.length; k++) {
	    choice = 1;

	    // if d1 is empty, d2 wins; if d2 is empty, d1 wins; otherwise,
	    // compare the two cards
	    if (i == d1.cards.length)
		choice = 2;
	    else if (j == d2.cards.length)
		choice = 1;
	    else if (Card.compareCards(d1.cards[i], d2.cards[j]) > 0)
		choice = 2;
			
	    // make the new deck refer to the winner card
	    if (choice == 1) {
		result.cards[k] = d1.cards[i];  i++;
	    } else {
		result.cards[k] = d2.cards[j];  j++;
	    }			
	}
	return result;
}

/*
 * Sort the Deck using merge sort.
 */
public static Deck mergeSort(Deck deck) {
	if (deck.cards.length < 2) {
	    return deck;
	}
	int mid = (deck.cards.length-1) / 2;
	
	// divide the deck roughly in half
	Deck d1 = subdeck(deck, 0, mid);
	Deck d2 = subdeck(deck, mid+1, deck.cards.length-1);
	
	// sort the halves
	d1 = mergeSort(d1);
	d2 = mergeSort(d2);
	
	// merge the two halves and return the result
	// (d1 and d2 get garbage collected)
	return merge(d1, d2);
}
